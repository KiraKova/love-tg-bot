
import os
import json
import asyncio
import random
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import Router
from dotenv import load_dotenv
from datetime import datetime, timedelta
from aiohttp import web

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = 683073014
TARGET_USER_ID = 1175918883  # –¥–µ–≤—É—à–∫–µ

ALLOWED_USERS = [OWNER_ID, TARGET_USER_ID]

bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)

DATA_FILE = "data.json"
HISTORY_FILE = "history.json"
if not os.path.exists(HISTORY_FILE):
    with open(HISTORY_FILE, "w") as f:
        json.dump([], f)

if not os.path.exists(DATA_FILE):
    initial_tasks = [
        {"name": "–ó–∞–≤—Ç—Ä–∞–∫ –≤ –∫—Ä–æ–≤–∞—Ç—å", "price": 25},
        {"name": "–ü—Ä–æ–≥—É–ª–∫–∞", "price": 15},
        {"name": "–ö—É–ø–∏ –≤–∫—É—Å–Ω—è—à–∫–∏", "price": 20},
        {"name": "–ú–∞—Å—Å–∞–∂", "price": 30},
        {"name": "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º –≤–º–µ—Å—Ç–µ", "price": 10}
    ]
    with open(DATA_FILE, "w") as f:
        json.dump({"balance": 0, "tasks": initial_tasks}, f)

def load_data():
    with open(DATA_FILE, "r") as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=2)


def load_history():
    with open(HISTORY_FILE, "r") as f:
        return json.load(f)

def save_history(history):
    with open(HISTORY_FILE, "w") as f:
        json.dump(history, f, indent=2)


def build_main_menu():
    kb = InlineKeyboardBuilder()
    kb.button(text="üí∞ –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Ü–µ–ª—É–µ–≤", callback_data="add_kiss")
    kb.button(text="üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="add_task")
    kb.button(text="üìã –í—ã–±—Ä–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="select_task")
    kb.button(text="üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–ª–∞–Ω—Å–∞", callback_data="show_balance")
    return kb.adjust(1).as_markup()



def build_task_menu(tasks):
    kb = InlineKeyboardBuilder()
    for idx, task in enumerate(tasks):
        kb.button(text=f"{task['name']} ({task['price']}üíã)", callback_data=f"task_{idx}")
        kb.button(text=f"‚ùå –£–¥–∞–ª–∏—Ç—å: {task['name']}", callback_data=f"delete_{idx}")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_back")
    return kb.adjust(1).as_markup()



compliments = [
    "–¢—ã ‚Äî —Å–∞–º–æ–µ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ, —á—Ç–æ —É –º–µ–Ω—è –µ—Å—Ç—å üíõ",
    "–ù–∞–¥–µ—é—Å—å, —É —Ç–µ–±—è —Å–µ–≥–æ–¥–Ω—è —Ö–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ ‚òÄÔ∏è",
    "–Ø –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º, –¥–∞–∂–µ –µ—Å–ª–∏ –º–æ–ª—á—É",
    "–¢—ã —É–º–µ–µ—à—å –¥–µ–ª–∞—Ç—å –º–æ–π –¥–µ–Ω—å –ª—É—á—à–µ –ø—Ä–æ—Å—Ç–æ —Å–≤–æ–∏–º –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ–º",
    "–Ø –≤ —Ç–µ–±—è –≤–µ—Ä—é. –í—Å–µ–≥–¥–∞.",
    "–¢—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å —Å–∞–º–æ–≥–æ —Ç—ë–ø–ª–æ–≥–æ –∏ –¥–æ–±—Ä–æ–≥–æ –≤ —ç—Ç–æ–º –º–∏—Ä–µ",
    "–Ø —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥—É –º–æ–º–µ–Ω—Ç–∞, –∫–æ–≥–¥–∞ —Å–º–æ–≥—É —Ç–µ–±—è –æ–±–Ω—è—Ç—å",
    "–ö–∞–∂–¥–∞—è —Ç–≤–æ—è —É–ª—ã–±–∫–∞ ‚Äî —ç—Ç–æ –º–æ–π –ª—É—á—à–∏–π –º–æ–º–µ–Ω—Ç –¥–Ω—è üòä",
    "–¢—ã –¥–µ–ª–∞–µ—à—å –º–æ—é –∂–∏–∑–Ω—å —è—Ä—á–µ",
    "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ç—ã –µ—Å—Ç—å üíï",
    "–ù–∏–∫—Ç–æ –Ω–µ —Å—Ä–∞–≤–Ω–∏—Ç—Å—è —Å —Ç–æ–±–æ–π ‚Äî —Ç—ã –æ—Å–æ–±–µ–Ω–Ω–∞—è",
    "–¢—ã –Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—à—å, –∫–∞–∫ —Å–∏–ª—å–Ω–æ —è —Ç–æ–±–æ–π –≥–æ—Ä–∂—É—Å—å",
    "–ï—Å–ª–∏ –±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ, —è –±—ã —Ç–µ–±–µ —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–¥–∞–ª –º–∏–ª–ª–∏–æ–Ω –æ–±–Ω–∏–º–∞—à–µ–∫ ü§ó",
    "–¢—ã –º–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è",
    "–ü—Ä–æ—Å—Ç–æ –∑–Ω–∞–π ‚Äî —Ç—ã –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–∞—è",
    "–¢—ã ‚Äî –º–æ–π –ª–∏—á–Ω—ã–π —Å—É–ø–µ—Ä–≥–µ—Ä–æ–π –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏",
    "–ú–Ω–µ –ø–æ–≤–µ–∑–ª–æ, —á—Ç–æ —Ç—ã —Ä—è–¥–æ–º",
    "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å —Å —Ç–æ–±–æ–π ‚Äî —ç—Ç–æ –ø–æ–¥–∞—Ä–æ–∫ üéÅ",
    "–ü—É—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è –≤—Å—ë —Å–ª–æ–∂–∏—Ç—Å—è —Ç–∞–∫, –∫–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å üí´",
    "–°–∫—É—á–∞—é. –û—á–µ–Ω—å. –í—Å–µ–≥–¥–∞.",
    "–¢—ã —Å–∏–ª—å–Ω–µ–µ, —á–µ–º –¥—É–º–∞–µ—à—å, –∏ –ø—Ä–µ–∫—Ä–∞—Å–Ω–µ–µ, —á–µ–º –≤–∏–¥–∏—à—å –≤ –∑–µ—Ä–∫–∞–ª–µ",
    "–¢—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å –∑–∞–±–æ—Ç—ã, –ª—é–±–≤–∏ –∏ —Ç–µ–ø–ª–∞. –ò —è —Ö–æ—á—É —ç—Ç–æ —Ç–µ–±–µ –¥–∞–≤–∞—Ç—å",
    "–¢—ã —É–º–µ–µ—à—å –¥–µ–ª–∞—Ç—å –¥–∞–∂–µ —Å–∞–º—ã–π —Å–µ—Ä—ã–π –¥–µ–Ω—å —Ç—ë–ø–ª—ã–º",
    "–¢—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ —á—É–¥–æ ‚Äî —Ç—ã –º–æ—ë —á—É–¥–æ üíó"
]

async def send_compliment(hour):
    while True:
        now = datetime.utcnow() + timedelta(hours=7)  # –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫ UTC+7
        if now.hour == hour and now.minute == 0:
            compliment = random.choice(compliments)
            try:
                await bot.send_message(TARGET_USER_ID, f"‚ú® {compliment}")
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", e)
            await asyncio.sleep(60)  # —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä–∏–ª–æ—Å—å –≤ —Ç—É –∂–µ –º–∏–Ω—É—Ç—É
        await asyncio.sleep(30)

@router.message(F.text == "/start")
async def start_cmd(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=build_main_menu())

@router.callback_query(F.data == "add_kiss")
async def callback_add_kiss(call: types.CallbackQuery):
    kb = InlineKeyboardBuilder()
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_back")
    await call.message.edit_text("–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ü–µ–ª—É–µ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10)", reply_markup=kb.as_markup())

@router.message(F.text.regexp(r'^\d+$'))
async def handle_kiss_amount(message: types.Message):
    val = int(message.text)
    data = load_data()
    data["balance"] += val
    save_data(data)
    await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {val} üíã. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {data['balance']} üíã", reply_markup=build_main_menu())


@router.callback_query(F.data == "add_task")
async def callback_add_task(call: types.CallbackQuery):
    kb = InlineKeyboardBuilder()
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_back")
    await call.message.edit_text("–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ:—Ü–µ–Ω–∞", reply_markup=kb.as_markup())

@router.message(F.text.contains(":"))
async def save_task(message: types.Message):
    try:
        name, price = message.text.split(":", 1)
        task = {"name": name.strip(), "price": int(price.strip())}
        data = load_data()
        data["tasks"].append(task)
        save_data(data)
        await message.answer(f"–ó–∞–¥–∞–Ω–∏–µ '{task['name']}' –∑–∞ {task['price']} üíã –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=build_main_menu())
    except:
        await message.answer("–û—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: –ù–∞–∑–≤–∞–Ω–∏–µ:—Ü–µ–Ω–∞")

@router.callback_query(F.data == "select_task")
async def show_tasks(call: types.CallbackQuery):
    data = load_data()
    await call.message.edit_text("–í—ã–±–µ—Ä–∏ –∑–∞–¥–∞–Ω–∏–µ:", reply_markup=build_task_menu(data["tasks"]))

@router.callback_query(F.data == "show_balance")
async def show_balance(call: types.CallbackQuery):
    data = load_data()
    await call.message.edit_text(f"–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {data['balance']} üíã", reply_markup=build_main_menu())

@router.callback_query(F.data.startswith("task_"))
async def task_selected(call: types.CallbackQuery):
    task_index = int(call.data.split("_")[1])
    data = load_data()
    task = data["tasks"][task_index]
    if data["balance"] < task["price"]:
        await call.message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ—Ü–µ–ª—É–µ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è! üíî", reply_markup=build_main_menu())
        return
    data["balance"] -= task["price"]
    save_data(data)
    await call.message.answer(f"–ó–∞–¥–∞–Ω–∏–µ '{task['name']}' –≤—ã–±—Ä–∞–Ω–æ! –û—Å—Ç–∞—Ç–æ–∫: {data['balance']} üíã", reply_markup=build_main_menu())
    await bot.send_message(OWNER_ID, f"üì• –ü–æ—Å—Ç—É–ø–∏–ª –∑–∞–∫–∞–∑: {task['name']} –æ—Ç @{call.from_user.username}")


@router.message(F.text == "/test_compliment")
async def test_compliment(message: types.Message):
    compliment = random.choice(compliments)
    await message.answer(f"‚ú® {compliment}")



async def handle_ping(request):
    return web.Response(text="I‚Äôm alive!")

async def run_web_server():
    app = web.Application()
    app.router.add_get("/", handle_ping)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", 8080)
    await site.start()



@router.callback_query(F.data == "go_back")
async def go_back_menu(call: types.CallbackQuery):
    await call.message.edit_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=build_main_menu())



@router.callback_query(F.data.startswith("delete_"))
async def delete_task(call: types.CallbackQuery):
    index = int(call.data.split("_")[1])
    data = load_data()
    deleted = data["tasks"].pop(index)
    save_data(data)
    await call.message.answer(f"‚ùå –ó–∞–¥–∞–Ω–∏–µ ¬´{deleted['name']}¬ª —É–¥–∞–ª–µ–Ω–æ.", reply_markup=build_main_menu())


async def main():
    asyncio.create_task(send_compliment(10))  # 10:00
    asyncio.create_task(send_compliment(14))  # 14:00
    asyncio.create_task(send_compliment(20))  # 20:00
    asyncio.create_task(run_web_server())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
